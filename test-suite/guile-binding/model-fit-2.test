;-*-scheme-*-
;
; stress model fitting operations
; this version: re-use the same model object
; many times
;
(use-modules (oop goops)
	     (burrow spectrum)
	     (burrow model)
	     (ice-9 format))

(sleep-if-requested)

(define (gaussian-profile-1d f sigma)
  (model-gaussian (make <hos-model-dimension>) f sigma))

(define (gaussian-2d x wx y wy intensity)
  (model-product
   (model-product
    (gaussian-profile-1d x wx)
    (gaussian-profile-1d y wy))
   intensity))

; ---- the simulated spectrum ------
(define spectrum
  (spectrum-2d-from-model
   (model-add-noise (gaussian-2d
		     (make <hos-parameter> #:value 9)
		     (make <hos-parameter> #:value 0.3)
		     (make <hos-parameter> #:value 120)
		     (make <hos-parameter> #:value 0.5)
		     (make <hos-parameter> #:value 1e3))
		    10)
   11 6 128 125 10 128))

; --- the model to fit ---

(define (make-par x dx)
  (make <hos-parameter> #:value x #:prior-mean x #:prior-stddev dx))

(define x  (make-par 9.3 0.4))
(define wx (make-par 0.5 0.2))
(define y  (make-par 119.5 0.7))
(define wy (make-par 0.4 0.3))
(define intensity (make-par 1e3 5e2))
(define model (gaussian-2d x wx y wy intensity))

(define fit-radius-x 0.5)
(define fit-radius-y 1.2)

(define (go!)
  (let* ((solver (make <hos-solver-anneal>))
	 (roi (spectrum-extract-2d-ppm
	       spectrum
	       (- (get x 'value) fit-radius-x)
	       (- (get y 'value) fit-radius-y)
	       (+ (get x 'value) fit-radius-x)
	       (+ (get y 'value) fit-radius-y))))
    (solver-set-model solver roi model)
    (solver-append-parameter solver x)
    (solver-append-parameter solver wx)
    (solver-append-parameter solver y)
    (solver-append-parameter solver wy)
    (solver-append-parameter solver intensity)

    ; minimize the model
    (do ((t 100 (/ t 2)))
	((< t 0.01))
      (solver-anneal-sample solver 20 1.0 t))
    'ok))

(add-hook! after-gc-hook (lambda ()(display 'X)))

(display "Testing model fitting (re-use model object)\n")
(do ((i 0 (+ i 1)))
    ((> i 2500))
  (go!)
  (if (= 0 (remainder i 50))
      (display ".")))
(newline)


