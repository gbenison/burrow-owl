#!/bin/sh
# -*-scheme-*-

exec guile -s $0 $@

=======================

Copyright (C) 2006, 2007 Greg Benison

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

============================
Finite State Machine (fsm) compiler

The fsm consists of a set of 'states' which are in turn composed of
'substates'.  A rule consists of 'pre-substates' and 'post-substates'.
It matches any pre-state that contains all the 'pre-substates'.  It
maps the pre-state to a post-state equal to the pre-state, minus the
pre-substates, plus the post-substates.  There is associated with each
substate an 'entry condition' and an 'entry action'.  A rule will only
be followed if the 'entry condition' for each post-substate is true.
The default entry condition is always true.  Upon following a rule, an
'entry action' is executed for each of the post-substates.  The
default entry action is to do nothing.

============================

!#

(use-modules (ice-9 rdelim)
	     (ice-9 regex)
	     (srfi srfi-1))

(debug-set! stack 100000)
(define infile (open-input-file (cadr (command-line))))

; ----- utilities ------

(define (write-line . args)
  (for-each display args)
  (newline))

(define (true? x) x)

(define (all-but-last elts)
  (reverse
   (cdr (reverse elts))))

(define (remove-duplicates elts)
  (let loop ((result '())
	     (rest elts))
    (if (null? rest)
	(reverse result)
	(let ((next (car rest)))
	  (if (member next result)
	      (loop result (cdr rest))
	      (loop (cons next result)
		    (cdr rest)))))))

; returns: items with 'query' excised, or #f
(define (all-but query items)
  (let loop ((result '())
	     (remaining items))
    (cond ((null? remaining) #f)
	  ((equal? query (car remaining))
	   (append result (cdr remaining)))
	  (else (loop (append result (list (car remaining)))
		      (cdr remaining))))))

(define (all-but-multiple queries items)
  (if (null? queries)
      items
      (let ((cur (all-but (car queries) items)))
	(and cur
	     (all-but-multiple (cdr queries) cur)))))

(define (symbol-canonicalize sym)
  (string-upcase!
   (list->string
    (map (lambda(c)
	   (if (or (char-alphabetic? c)
		   (char-numeric? c))
	       c
	       #\_))
	 (string->list (symbol->string sym))))))

(define (parse-comma-list str)
  (map string-trim-both
       (string-split str #\,)))

(define (parse-comma-list/symbols str)
  (map string->symbol (parse-comma-list str)))

;; some regular expression patterns describing the specification format
(define rx/rule "(.*)-->(.*)")
(define rx/comment "^#")

(define (read-until-%% port)
  (let ((str (read-line port)))
    (if (or (eof-object? str)
	    (string-match "^%%" str))
	'()
	(cons str (read-until-%% port)))))

; --------- C rendering ---------------

(define (->string x)(format #f "~a" x))
(define (c:if condition true-branch . false-branch)
  (string-append "if " (c:parenthesize condition)(c:block true-branch)
		 (if (null? false-branch) "" (string-append "else " (c:block (car false-branch))))))
(define (c:parenthesize x)(string-append "(" x ")"))
(define (c:and cnds)
  (c:parenthesize (string-join (map c:parenthesize cnds) " && ")))
(define (c:goto label)
  (string-append "goto " (->string label) ";"))
(define (c:block x)
  (string-append " { " x "}")) 

; -------------------------------------

;
; input phase-- gather header, footer, and rules
;
(define header (read-until-%% infile))
(define middle (read-until-%% infile))
(define footer (read-until-%% infile))

(define (is-a-rule? str)
  (and (string-match rx/rule str)
       (not (string-match rx/comment str))))

(define pre-states '())
(define post-states '())
(define (parse-line! line)
  (let ((m1 (string-match rx/rule line)))
    (set! pre-states  (cons (parse-comma-list/symbols (match:substring m1 1)) pre-states))
    (set! post-states (cons (parse-comma-list/symbols (match:substring m1 2)) post-states))))

(for-each parse-line! (filter is-a-rule? middle))
(set! pre-states (reverse pre-states))
(set! post-states (reverse post-states))

(define state-match? all-but-multiple)
(define (state-match-exactly? state1 state2)
  (let ((rejects (state-match? state1 state2)))
    (and rejects (null? rejects))))

(define (contains-state? states state)
  (cond ((null? states) #f)
	((state-match-exactly? (car states) state) #t)
	(else (contains-state? (cdr states) state))))

; return 'state', but with duplicate symbols removed
(define (state-tidy state)
  (let loop ((result '())
	     (remaining state))
    (cond ((null? remaining)
	   (reverse result))
	  ((member (car remaining) result)
	   (loop result (cdr remaining)))
	  (else (loop (cons (car remaining) result)
		      (cdr remaining))))))


(define state:index car)
(define state:keys cdr)
(define (make-state index keys)(cons index keys))

(define (state:label state)(format #f "S~a" (state:index state)))
(define (state->symbol-string state)
  (string-join
   (map symbol->string (state:keys state)) ":"))

(define (key->conditional key)
  (string-append (symbol-canonicalize key) "__CONDITION"))

(define (key->action key)
  (string-append (symbol-canonicalize key) "__ACTION"))

(define (process-state:start! state)
  (write-line (state:label state) ":")
  (write-line "fsm_current_state = \"" (state->symbol-string state) "\";")
  (write-line "#ifdef FSM_VERBOSE")
  (write-line "fprintf(stderr, \"%s\\n\", fsm_current_state);")
  (write-line "#endif"))

(define (process-state:end! state)
  (write-line "goto S_TRAPPED;")
  (write-line "/*********/"))

(define (process-transition! pre-state post-state added-keys)
  (define (ensure-definitions key)
    (write-line "#ifndef " (key->conditional key))
    (write-line "#define " (key->conditional key) " (1)")
    (write-line "#endif")
    (write-line "#ifndef " (key->action key))
    (write-line "#define " (key->action key) " { /* no-op */ }")
    (write-line "#endif"))
  (for-each ensure-definitions added-keys)
  (write-line
   (c:if (c:and (map key->conditional added-keys))
	 (string-join
	  (append (map key->action added-keys)
		  (list (c:goto (state:label post-state))))
	  "; "))))

; ---- start output ----

(write-line "/* This file is generated by fsm-compiler; do not edit */")
(for-each write-line header)  ; echo the header of the input (before first %%)
(write-line "static char* fsm_current_state;")

;
; Iterate through all the rules...
;
(let ((all-states '())
      (n 0))
  (define (lookup-state keys)
    (let loop ((states all-states))
      (cond ((null? states) #f)
	    ((state-match? keys (state:keys (car states)))(car states))
	    (else (loop (cdr states))))))
  (define (consider-states! starting-states)
    (let ((next-batch '()))
      (define (process-state! state)
	(define (consider-rule pre-state post-state)
	  (define match (state-match? pre-state (state:keys state)))
	  (if match
	      (let* ((target-keys (state-tidy (append match post-state)))
		     (target-state (lookup-state target-keys)))
		(if (not target-state)
		    (begin (set! n (+ n 1))
			   (set! target-state (make-state n target-keys))
			   (set! next-batch (cons target-state next-batch))
			   (set! all-states (cons target-state all-states))))
		(process-transition! state target-state post-state))))
	(process-state:start! state)
	(for-each consider-rule pre-states post-states)
	(process-state:end! state))
      (for-each process-state! starting-states)
      (if (not (null? next-batch))
	  (consider-states! next-batch))))
  (consider-states! (list (list n 'start))))

(display
"
S_TRAPPED:
#ifndef FSM_TRAPPED
   fprintf(stderr, \"fsm: trapped in state \\\"%s\\\"\\n\", fsm_current_state);
   exit(1);
#else
FSM_TRAPPED
#endif

"
)
(for-each write-line footer)  ; echo the footer of the input (after second %%)




