#!/bin/sh
# -*-scheme-*-

exec guile -s $0 $@

!#

(use-modules (nmr acqu-grok)
	     (ice-9 format)
	     (ice-9 rdelim)
	     (ice-9 popen)
	     (ice-9 regex))

(define file-names-raw
  (if (null? (cdr (command-line)))
      '(".")
      (cdr (command-line))))

(define (suffix-chomper suffix)
  (lambda (str)
    (substring
     str
     0
     (car (vector-ref (string-match (string-append suffix "$") str) 1)))))

; from ROOT, find all subdirs containing a 'pulseprogram' file,
; a sure sign that the subdir is a Bruker experiment.
; result is the basename of the directory terminated by '/'
(define (base->files root)
  (let ((p (open-input-pipe
	    (format #f "find ~a -name pulseprogram" root))))
    (map (suffix-chomper "pulseprogram")
	 (let loop ((result '()))
	   (let ((next (read-line p)))
	     (if (eof-object? next)
		 result
		 (loop (cons next result))))))))

(define record:fname car)
(define (record:lookup record sym)
  (assoc-ref (cdr record) sym))

(define records
  (sort
   (map (lambda (fname)
	  (cons fname
		(parse-gather (string-append fname "acqus") (list "DATE" "TD" "PULPROG"))))
	(apply append (map base->files file-names-raw)))
   (lambda (rec-a rec-b)
     (define (rec->date rec)
       (string->number (record:lookup rec 'DATE)))
     (< (rec->date rec-a)
	(rec->date rec-b)))))

(define (get-dimens fname)
  (define (get-td name)
    (let ((full-name (string-append fname name)))
      (and (file-exists? full-name)
	   (parse-single full-name "TD"))))
  (let ((td-1 (get-td "acqus"))
	(td-2 (get-td "acqu2s"))
	(td-3 (get-td "acqu3s")))
    (if td-3
	(string-append "3D: " td-3 "," td-2 "," td-1)
	(if td-2
	    (string-append "2D: " td-2 "," td-1)
	    (string-append "1D: " td-1)))))

(define (process-record rec)
  (let ((fname (record:fname rec)))
    (format #t "~15a ~20a ~10a   ~10a~%"
	    fname
	    (record:lookup rec 'PULPROG)
	    (strftime "%c" (localtime (string->number (record:lookup rec 'DATE))))
	    (get-dimens fname))))

(for-each process-record records)


