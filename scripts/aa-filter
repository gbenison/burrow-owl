;; GCB 12jul08

;; CaCb chemical-shift masks:
;; use a simulated C spectrum convoluted with
;; an hncacb to filter by amino acid type.

(use-modules (burrow hacks)
	     (oop goops)
	     (gnome gtk)
	     (spectrum)
	     (spec-extra)
	     (burrow chemical-shift-distributions))

(sleep-if-requested)

(define-usage
  "Present amino-acid type filtered planes of a 3D triple resonance spectrum."
  '(<spectrum>))

(define (gtk-combo-box-get-selected combo)
  (let* ((active (gtk-combo-box-get-active combo))
	 (model (get-model combo))
	 (iter (get-iter model active)))
    (get-value model iter 0)))

(define (apply-to arg1 proc)
  (lambda (arg2)
    (proc arg1 arg2)))

; ----- sim-spec utilities --------

(define (backing-sim-append-gaussian backing int . args)
  (let ((p (sim-peak-product-new int)))
    (define (add-profile cntr dev . args)
      (sim-peak-product-append-profile p (sim-profile-gaussian-new cntr dev))
      (if (not (null? args))
	  (apply add-profile args)))
    (apply add-profile args)
    (backing-sim-append-peak backing p)))

; ---------------------------------

(define (sim-c-spec c delta-c)
  (let ((b (backing-sim-new)))
    (backing-sim-append-dimension b (dimension-sim-new 15.0 75.0 128))
    (backing-sim-append-gaussian b 1.0 c delta-c)
    (backing-sim-generate-spectrum b)))

;; expects triple resonance spectrum in HCN order
(define (make-filtered-spec spec-triple-res aa)
  (let ((ca-shift (shift-lookup aa 'CA))
	(cb-shift (shift-lookup aa 'CB)))
    (define (hncacb->conv shift)
      (let* ((mean (shift-mean shift))
	     (stddev (shift-stddev shift))
	     (sim-spec (sim-c-spec mean stddev))
	     (s0 (spectrum-transpose spec-triple-res 1))
	     (s1 (spectrum-extract-ppm
		  s0
		  (+ mean (* 2 stddev))
		  (- mean (* 2 stddev))))
	     (s2 (spectrum-diagonal-project
		  (spectrum-convolute sim-spec s1)))
	     (s3 (spectrum-integrate s2)))
	(confess "made conv spec with " (spectrum-ndim s3) " dims")
	s3))
    (let ((tmp-result
	   (if (and ca-shift cb-shift)
	       (spectrum-plane-multiply (spectrum-cache (hncacb->conv ca-shift))
					(spectrum-cache (hncacb->conv cb-shift)))
	       (hncacb->conv ca-shift))))
      (spectrum-cache tmp-result))))

(confess "sim table done")

(define spec-name "cbcaconh.DAT")
(define spec-3d
  (bruker-transpose (spectrum-nih-from-file spec-name)))

;; make a whole filtered spectrum table
(define filtered-spec-retrieve
  (let ((table (list)))
    (lambda (aa)
      (let ((result (assoc-ref table aa)))
	(or result
	    (let ((result (make-filtered-spec spec-3d aa)))
	      (set! table (cons (cons aa result) table))
	      result))))))

(define (canvas-add-assignment canv asg)
  (let ((marker (canvas-add-marker-text canv (format #f "~a" (car asg)))))
    (marker-set-pos marker
		    (assoc-ref (assoc-ref asg 'assignments) 'H)
		    (assoc-ref (assoc-ref asg 'assignments) 'N))
    (marker-set-movable marker #f)))


(define w (make <gtk-window> #:default-height 300 #:default-width 300))
(define canv (make <hos-canvas>))
(contour-set-draw-negative (painter-get-contour (canvas-get-painter canv)) #t)

(define spec (filtered-spec-retrieve 'ALA))
(define thres (make <gtk-adjustment> #:lower 2 #:upper 20 #:value 15.0 #:step-increment 0.1))
(define thres-spin (make <gtk-spin-button> #:digits 2 #:adjustment thres))
(define factor-spin (make <gtk-spin-button> #:digits 2))
(canvas-set-thres canv thres)
(canvas-set-spectrum canv spec)
(for-each (lambda (asg)(canvas-add-assignment canv asg))
	  (file->list "assignments.scm"))
(set factor-spin 'adjustment (contour-get-factor-adjustment
			      (painter-get-contour
			       (canvas-get-painter canv))))

(define shift-label (make <gtk-label>))
(define marker (canvas-add-marker canv))
(let ((refresh!
       (lambda (m x y)
	 (set shift-label 'label
	      (format #f "~a, ~a~%" x y))
	 #f)))
  (connect marker 'dropped refresh!))

(define aa-combo
  (let ((combo (gtk-combo-box-new-text)))
    (for-each (apply-to combo gtk-combo-box-append-text)
	      (map symbol->string amino-acids))
    combo))

;; FIXME now put in something to actually set the spectrum!
(connect aa-combo 'changed
	 (lambda args
	   (write-line (gtk-combo-box-get-selected aa-combo))
	   (canvas-set-spectrum canv
				(filtered-spec-retrieve
				 (string->symbol (gtk-combo-box-get-selected aa-combo))))
	   #f))

(define plot-button (make <gtk-button> #:label "plot"))
(connect plot-button 'clicked
	 (lambda args
	   (let ((painter (painter-bwps-new-file "result.ps")))
	     (painter-set-spectrum painter (canvas-get-spectrum canv))
	     (let ((contour (painter-get-contour painter)))
	       (contour-set-thres-adjustment contour thres)
	       (contour-set-factor-adjustment contour (get factor-spin 'adjustment)))
	     (painter-view-ppm painter spec)
	     (painter-redraw painter 0 0 10000000 10000000))
	   #f))

(define main-window
  (let ((main-window (make <gtk-window> #:title "NMR"))
	(vbox (make <gtk-vbox>))
	(spec-frame (make <gtk-frame> #:label spec-name)))
    (add spec-frame canv)
    (pack-start vbox shift-label #f #f 10)
    (let ((hbox (make <gtk-hbox>)))
      (pack-start hbox (make <gtk-label> #:label "threshold:"))
      (pack-start hbox thres-spin #f #f 5)
      (pack-start hbox (make <gtk-label> #:label "factor:"))
      (pack-start hbox factor-spin #f #f 5)
      (pack-start hbox aa-combo #f #f 5)
      (pack-start hbox plot-button #f #f 5)
      (pack-start vbox hbox #f #f 10))
    (pack-start vbox spec-frame #t #t 0)
    (add main-window vbox)
    main-window))

(show-all main-window)
(connect main-window 'destroy (lambda args (gtk-main-quit)))
(gtk-main)

