; -*-scheme-*-
;
; side-by-side views of multiple spectra
; with synchronized cursors

(use-modules (burrow hacks)
	     (srfi srfi-1)
	     (ice-9 format)
	     (ice-9 getopt-long)
             (oop goops)
	     (gnome gobject)
	     (gnome gtk)
             (burrow spectrum)
             (burrow canvas)
	     (burrow assignments))

(sleep-if-requested)

(define-usage
  "Side-by-side comparison of 2D spectra"
  '(<spec-1>)
  '(<spec-2>)
  '(...))

(define option-spec
  '((assignment-file (single-char #\a) (value #t))))
(define options (getopt-long (command-line) option-spec))
(define assignment-file-name (option-ref options 'assignment-file "assignments.scm"))
(define spectrum-file-names  (option-ref options '() #f))


; ---- parameters ----

;; size of integration box
(define x-delta 0.04)
(define y-delta 0.4)

(define-class <ornament-group> (<gobject>)
  #:gsignal '(member-dropped #f))
(define (ornament-group-add! group ornament)
  (connect ornament 'dropped (lambda args (emit group 'member-dropped))))

(define (amide residue-name H N verified?)
  (cons residue-name
	(cons (cons (make <gtk-adjustment> #:lower -1000 #:upper 1000 #:step-increment 0.01 #:value H)
		    (make <gtk-adjustment> #:lower -1000 #:upper 1000 #:step-increment 0.01 #:value N))
	      (cons verified? (make <ornament-group>)))))

(define amide:name car)
(define amide:H caadr)
(define amide:N cdadr)
(define amide:verified? caddr)
(define amide:ornament-group cdddr)

(define (amide:set-verified asg verified?)
  (set-car! (cddr asg) verified?))

(define (amide:toggle-verified asg)
  (amide:set-verified asg (not (amide:verified? asg))))

(define (assignments:find-atom assignments name)
  (find (lambda (asg)
	  (equal? (assignment:atom-name asg) name)) assignments))

(define sequence '())

(define assignments
  (false-if-exception
   (hash-fold
    (lambda (key value seed)
      (define (find-shift/safe name)
	(false-if-exception (assignment:shift (assignments:find-atom value name))))
      (set! sequence (assoc-set! sequence key (assignment:residue-type (car value))))
      (let ((H (find-shift/safe 'H))
	    (N (find-shift/safe 'N)))
	(if (and H N)
	    (cons (amide key H N #t) seed)
	    seed)))
    '()
    (assignments->residue-table
     (assignments-from-file assignment-file-name)))))

(define (current-assignments)
  (define (get-res-type residue-id)
    (or (false-if-exception
	 (cdr (assoc residue-id sequence)))
	'X))
  (apply append
   (map (lambda (asg)
	 (let ((name (amide:name asg))
	       (H    (make-assignment))
	       (N    (make-assignment)))
	   (assignment-set! H 'shift (get (amide:H asg) 'value))
	   (assignment-set! N 'shift (get (amide:N asg) 'value))
	   (assignment-set! H 'atom-name 'H)
	   (assignment-set! N 'atom-name 'N)
	   (assignment-set! H 'residue-name name)
	   (assignment-set! N 'residue-name name)
	   (assignment-set! H 'residue-type (get-res-type name))
	   (assignment-set! N 'residue-type (get-res-type name))
	   (list H N)))
	assignments)))

(define (canvas-add-assignments canv . movable?)
  (if assignments
      (for-each (lambda (asg)
		  (let* ((H (amide:H asg))
			 (N (amide:N asg))
			 (group (amide:ornament-group asg))
			 (label (format #f "~a" (amide:name asg)))
			 (marker (canvas-add-marker-text canv label)))
		    (define (sync-colors! . args)
		      (set marker 'color
			   (if (amide:verified? asg) "red" "grey")))
		    (marker-set-adjustments marker H N)
		    (ornament-group-add! group marker)
		    (if (null? movable?)
			(set marker 'sensitive #f)
			(begin
			  (sync-colors!)
			  (connect marker 'acquire (lambda args
						     (amide:toggle-verified asg)
						     (sync-colors!)
						     #f))
			  (connect group 'member-dropped sync-colors!)))
		    'ok))
		assignments)))

(define (fname->panel fname)
  (let* ((spec (spectrum-nih-from-file fname))
	 (thres (make <gtk-adjustment> #:lower 2 #:upper 7 #:value 5.5 #:step-increment 0.1))
	 (thres-spin (make <gtk-spin-button> #:digits 2 #:adjustment thres))
	 (integration-label (make <gtk-label> #:label "integral"))
	 (canv (make <hos-canvas> #:width-request 300 #:height-request 200))
	 (zoom-canv (make <hos-canvas> #:width-request 300 #:height-request 200)))
    (canvas-set-thres canv thres)
    (canvas-set-thres zoom-canv thres)
    (canvas-set-draw-negative canv #t)
    (canvas-set-spectrum canv spec)
    (canvas-set-spectrum zoom-canv spec)
    (canvas-set-zoom zoom-canv 4)
    (let ((zoom-marker (canvas-add-marker canv)))
      (marker-set-adjustments zoom-marker x-adj y-adj)
      (connect zoom-marker 'dropped (lambda args (emit adjustments 'member-dropped))))
    (canvas-add-assignments canv)
    (let ((cursor-horiz (canvas-add-cursor-horizontal canv))
	  (cursor-vert (canvas-add-cursor-vertical canv))
	  (frame (make <gtk-frame> #:label fname))
	  (vbox (make <gtk-vbox>)))
      (define (get-mean)
	(let* ((x (cursor-get-position cursor-vert))
	       (y (cursor-get-position cursor-horiz)))
	  (spectrum-mean (spectrum-extract-2d-ppm spec
						  (- x x-delta)
						  (- y y-delta)
						  (+ x x-delta)
						  (+ y y-delta)))))
      (define (update-integration-label scale)
	(let ((mean (get-mean)))
	  (set integration-label 'label (format #f "intensity: ~$ relative: ~$" mean (/ mean scale)))))
      (let ((hbox (make <gtk-hbox>)))
	(pack-start hbox thres-spin #f #f 5)
	(pack-start hbox integration-label #f #f 5)
	(pack-start vbox hbox #f #f 10))
      (let ((zoom-scale (make <gtk-hscale>)))
	(set zoom-scale 'adjustment (get zoom-canv 'zoom-adjustment))
	(pack-start vbox zoom-scale #f #f 5))
      (pack-start vbox canv #t #t 0)
      (let ((sw (make <gtk-scrolled-window>)))
	(add sw zoom-canv)
	(pack-start vbox sw #t #t 5))
      (cursor-set-adjustment cursor-horiz y-adj)
      (cursor-set-adjustment cursor-vert x-adj)
; FIXME
;      (connect zoom-in-button 'clicked (zoom-canv 'zoom-in))
;      (connect zoom-out-button 'clicked (zoom-canv 'zoom-out))
      (connect cursor-horiz 'dropped (lambda args (emit adjustments 'member-dropped)))
      (connect cursor-vert 'dropped (lambda args (emit adjustments 'member-dropped)))
      (connect adjustments 'member-dropped
	       (lambda args
		 (let ((x (cursor-get-position cursor-vert))
		       (y (cursor-get-position cursor-horiz)))
		   (canvas-set-focus zoom-canv x y))))
      (emit adjustments 'member-dropped)
      (add frame vbox)
      (show-all frame)
      (ornaments-allow-simultaneous-grab cursor-horiz cursor-vert)
      (list (cons 'name fname)
	    (cons 'spec spec)
	    (cons 'canv canv)
	    (cons 'frame frame)
	    (cons 'update-integration-label update-integration-label)
	    (cons 'get-mean get-mean)
	    (cons 'cursor-horiz cursor-horiz)
	    (cons 'cursor-vert cursor-vert)))))

(define zoom-in-button (make <gtk-button> #:label "ZOOM IN"))
(define zoom-out-button (make <gtk-button> #:label "ZOOM OUT"))
(define write-button (make <gtk-button> #:label "WRITE ASSIGNMENTS"))
(connect write-button
	 'clicked
	 (lambda args 
	   (let ((asg (current-assignments)))
	     (assignments-to-file asg assignment-file-name)) #f))

(define x-adj #f)
(define y-adj #f)
(let ((spec-1 (spectrum-nih-from-file (car spectrum-file-names))))
  (set! x-adj (adjustment-for-spectrum spec-1 0))
  (set! y-adj (adjustment-for-spectrum spec-1 1)))

(define adjustments (make <ornament-group>))

(define (main)
  (let ((main-window (make <gtk-window> #:title "Compare NMR spectra"))
	(panels (map fname->panel spectrum-file-names))
	(vbox (make <gtk-vbox>))
	(shift-label (make <gtk-label>))
	(spec-hbox (make <gtk-hbox>)))
    (let ((first-panel
	   (catch 'wrong-type-arg (lambda()(car panels))(lambda args (throw 'usage)))))
      (confess "window made")
      (for-each (lambda (panel)
		  (pack-start spec-hbox (assoc-ref panel 'frame) panels)
		  'ok)
		panels)
      (let ((x-adj (cursor-get-adjustment (assoc-ref first-panel 'cursor-horiz)))
	    (y-adj (cursor-get-adjustment (assoc-ref first-panel 'cursor-vert))))
	(define (refresh-label . args)
	  (let ((x (gtk-adjustment-get-value x-adj))
		(y (gtk-adjustment-get-value y-adj)))
	    (set shift-label 'label (format #f "~a, ~a~%" x y)))
	  #f)
	(define refresh-intensities
	  (let ((get-scale (assoc-ref first-panel 'get-mean)))
	    (lambda args
	      (let ((scale (get-scale)))
		(for-each (lambda (panel)
			    ((assoc-ref panel 'update-integration-label) scale)) panels)))))
	(connect x-adj 'value-changed refresh-label)
	(connect y-adj 'value-changed refresh-label)
	(connect x-adj 'value-changed refresh-intensities)
	(connect y-adj 'value-changed refresh-intensities))
      (pack-start vbox shift-label #f #f 10)
      (let ((hbox (make <gtk-hbox>)))
	(pack-start hbox zoom-in-button #f #f 5)
	(pack-start hbox zoom-out-button #f #f 5)
	(pack-start hbox write-button #f #f 5)
	(pack-start vbox hbox #f #f 5))
      (pack-start vbox spec-hbox #t #t 0)
      (add main-window vbox)
      (show-all main-window)
      (connect main-window 'destroy (lambda args (gtk-main-quit)))
      (gtk-main))))

(catch 'usage main usage-message)
