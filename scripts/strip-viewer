; -*-scheme-*-

(use-modules (burrow hacks)
	     (oop goops)
             (gnome gtk)
	     (burrow spectrum)
	     (burrow canvas)
	     (burrow assignments)
	     (srfi srfi-1)
	     (ice-9 format)
	     (ice-9 getopt-long))

(define-usage
  "hsqc display with scrollable strip of 3D spectrum"
  '(<hsqc-spec>)
  '(<3d-spec>))

(sleep-if-requested)

(define option-spec
  '((assignment-file (single-char #\a) (value #t))))
(define options (getopt-long (command-line) option-spec))
(define assignment-file-name #f)
(define assignments #f)
(define 3d-file-name   (cadr (option-ref options '() #f)))
(define hsqc-file-name (car  (option-ref options '() #f)))

(let ((names '("assignments.str" "assignments.scm"))
      (requested-assignment-file (option-ref options 'assignment-file #f)))
  (if requested-assignment-file
      (set! names (cons requested-assignment-file names)))
  (let loop ((fnames names))
    (if (null? fnames)
	(warn "Could not read any of these assignment files: " names)
	(let ((next-file (car fnames))
	      (rest (cdr fnames)))
	  (if (false-if-exception
	       (set! assignments (assignments-from-file next-file)))
	      (set! assignment-file-name next-file)
	      (loop rest))))))

(define (canvas-add-assignments canv)
  (if assignments
      (let ((residues (assignments->residue-table assignments)))
	(hash-fold
	 (lambda (resid asg rest)
	   (let* ((H (find (assignment-predicate 'atom-name 'H) asg))
		  (N (find (assignment-predicate 'atom-name 'N) asg))
		  (label (format #f "~a" resid))
		  (marker (canvas-add-marker-text canv label)))
	     (if (and H N)
		 (begin
		   (set marker 'sensitive #f)
		   (set marker 'x (assignment:shift H))
		   (set marker 'y (assignment:shift N))))))
	 #f
	 residues))))

; ---------------
; Spectra
; ---------------

(define (get-assign-with-default asg name default)
  (or (false-if-exception
       (cdr (assoc name (cdr (assoc 'assignments (cdr asg))))))
      default))

(define spec-hsqc (spectrum-nih-from-file hsqc-file-name))

(define (spec->zoom-canvas spec)
  (let* ((sw (make <gtk-scrolled-window> #:height-request 300))
	 (factor 1)
	 (canv (make <hos-canvas> #:height-request 800 #:width-request 800)))
    (define (make-zoomer factor)
      (define (->int x)
	(inexact->exact (round x)))
      (lambda args
	(let* ((canv-allocation (gtk-widget-get-allocation canv))
	       (canv-width (vector-ref canv-allocation 2))
	       (canv-height (vector-ref canv-allocation 3))
	       (sw-allocation (gtk-widget-get-allocation sw))
	       (sw-width (vector-ref sw-allocation 2))
	       (sw-height (vector-ref sw-allocation 3))
	       (new-width (->int (* canv-width factor)))
	       (new-height (->int (* canv-height factor))))
	  (gtk-widget-set-size-request canv new-width new-height)
	  (set (gtk-scrolled-window-get-hadjustment sw) 'value
	       (- (* (/ new-width canv-width)	
		     (+ (get (gtk-scrolled-window-get-hadjustment sw) 'value)
			(* 0.5 sw-width)))
		  (* 0.5 sw-width)))
	  (set (gtk-scrolled-window-get-vadjustment sw) 'value
	       (- (* (/ new-height canv-height)	
		     (+ (get (gtk-scrolled-window-get-vadjustment sw) 'value)
			(* 0.5 sw-height)))
		  (* 0.5 sw-height))))
	#f))
    (define (set-center x y)
      (let ((sw-hadj (gtk-scrolled-window-get-hadjustment sw))
	    (sw-vadj (gtk-scrolled-window-get-vadjustment sw)))
	(let* ((canv-allocation (gtk-widget-get-allocation canv))
	       (canv-width (vector-ref canv-allocation 2))
	       (canv-height (vector-ref canv-allocation 3))
	       (sw-allocation (gtk-widget-get-allocation sw))
	       (sw-width (vector-ref sw-allocation 2))
	       (sw-height (vector-ref sw-allocation 3))
	       (x-fraction (/ (- (spectrum-orig-ppm spec 0) x)
			      (spectrum-sw-ppm spec 0)))
	       (y-fraction (/ (- y (spectrum-giro-ppm spec 1))
			      (spectrum-sw-ppm spec 1))))
	  (set sw-hadj 'value (- (* x-fraction canv-width)(/ sw-width 2.0)))
	  (set sw-vadj 'value (- (* y-fraction canv-height)(/ sw-height 2.0))))
	#f))
    (canvas-set-spectrum canv spec)
    (gtk-scrolled-window-add-with-viewport sw canv)
    (lambda (req)
      (cond ((eq? req 'zoom-in)(make-zoomer 1.2))
	    ((eq? req 'zoom-out)(make-zoomer (/ 1.0 1.2)))
	    ((eq? req 'canv) canv)
	    ((eq? req 'window) sw)
	    ((eq? req 'set-center) set-center)
	    (else (error "zoom canvas: unknown request " req))))))


(define spec-3d (spectrum-normalize-order (spectrum-nih-from-file 3d-file-name)))


;; default width for strips with xdim = H
(define H-width 0.15)

(define (make-strip H N)
  (spectrum-extract-ppm
   (spectrum-project-ppm
    (spectrum-transpose spec-3d 2)
    N)
   (- H H-width)
   (+ H H-width)))

;; start cross-section window FIXME add cross-section capability
(let* ((thres (make <gtk-adjustment> #:lower 2 #:upper 7 #:value 5.5 #:step-increment 0.1))
       (thres-spin (make <gtk-spin-button> #:digits 2 #:adjustment thres))
       (position-label (make <gtk-label>))
       (zoom-canv (spec->zoom-canvas spec-hsqc))
       (canv (zoom-canv 'canv)))
  (define (set-cross-position! z)
    (canvas-set-spectrum canv
			 (spectrum-project-ppm
			  (spectrum-transpose spec-3d 2) z)))
  (canvas-set-thres canv thres)
  (canvas-set-draw-negative canv #t)
  (canvas-add-assignments canv)
  (let ((marker (canvas-add-marker canv))
	(frame (make <gtk-frame> #:label "hello, world!"))
	(vbox (make <gtk-vbox>)))
    (let ((hbox (make <gtk-hbox>))
	  (zoom-in-button (make <gtk-button> #:label "ZOOM IN"))
	  (zoom-out-button (make <gtk-button> #:label "ZOOM OUT")))
      (pack-start hbox thres-spin #f #f 5)
      (pack-start hbox position-label #f #f 5)
      (pack-start hbox zoom-in-button #f #f 5)
      (pack-start hbox zoom-out-button #f #f 5)
      (pack-start vbox hbox #f #f 10)
      (pack-start vbox (zoom-canv 'window) #t #t 0)
      (add frame vbox)
      (let ((main-window (make <gtk-window> #:title "cross section"))
	    (main-hbox (make <gtk-hbox>)))
	(add main-window main-hbox)
	(pack-start main-hbox frame #t #t 0)
	(connect zoom-in-button 'clicked (zoom-canv 'zoom-in))
	(connect zoom-out-button 'clicked (zoom-canv 'zoom-out))
	(show-all main-window)))
    ;; start hsqc and strip window
    (let* ((thres (make <gtk-adjustment> #:lower 2 #:upper 7 #:value 5.5 #:step-increment 0.1))
	   (thres-spin (make <gtk-spin-button> #:digits 2 #:adjustment thres))
	   (position-label (make <gtk-label>))
	   (marker-cross marker)
	   (zoom-canv (spec->zoom-canvas spec-hsqc))
	   (canv (zoom-canv 'canv)))
      (canvas-set-thres canv thres)
      (canvas-set-draw-negative canv #t)
      (canvas-add-assignments canv)
      (let ((marker (canvas-add-marker canv))
	    (frame (make <gtk-frame> #:label "hello, world!"))
	    (vbox (make <gtk-vbox>)))
	(let ((hbox (make <gtk-hbox>))
	      (zoom-in-button (make <gtk-button> #:label "ZOOM IN"))
	      (zoom-out-button (make <gtk-button> #:label "ZOOM OUT")))
	  (marker-set-adjustments marker
				  (marker-get-x-adjustment marker-cross)
				  (marker-get-y-adjustment marker-cross))
	  (pack-start hbox thres-spin #f #f 5)
	  (pack-start hbox position-label #f #f 5)
	  (pack-start hbox zoom-in-button #f #f 5)
	  (pack-start hbox zoom-out-button #f #f 5)
	  (pack-start vbox hbox #f #f 10)
	  (pack-start vbox (zoom-canv 'window) #t #t 0)
	  (add frame vbox)
	  (let ((main-window (make <gtk-window> #:title "strip viewer"))
		(main-hbox (make <gtk-hbox>)))
	    (add main-window main-hbox)
	    (pack-start main-hbox frame #t #t 0)
	    (let* ((thres (make <gtk-adjustment> #:lower 2 #:upper 7 #:value 5.5 #:step-increment 0.1))
		   (thres-spin (make <gtk-spin-button> #:digits 2 #:adjustment thres))
		   (frame (make <gtk-frame> #:label 3d-file-name))
		   (vbox (make <gtk-vbox>))
		   (hbox (make <gtk-hbox>))
		   (canv (make <hos-canvas>
			   #:width-request 100
			   #:height-request 300)))
	      (canvas-set-spectrum canv (make-strip 8 120))
	      (let ((cursor (canvas-add-cursor-vertical canv))
		    (cursor-horiz (canvas-add-cursor-horizontal canv)))
		(canvas-set-thres canv thres)
		(canvas-set-draw-negative canv #t)
		(connect cursor-horiz 'dropped
			 (lambda (c p)
			   (set-cross-position! p) #f))
		(cursor-set-adjustment cursor (marker-get-x-adjustment marker))
		(pack-start hbox thres-spin #f #f 5)
		(pack-start vbox hbox #f #f 5)
		(pack-start vbox canv #t #t 0)
		(add frame vbox)
		(connect marker 'dropped
			 (lambda (m x y)
			   (set position-label 'label (format #f "~6f ~6f~%" x y))
					; ((zoom-canv 'set-center) x y)
			   (canvas-set-spectrum canv (make-strip x y))))
		(pack-start main-hbox frame #f #f 5))
	      (connect main-window 'destroy (lambda args (gtk-main-quit)))
	      (connect zoom-in-button 'clicked (zoom-canv 'zoom-in))
	      (connect zoom-out-button 'clicked (zoom-canv 'zoom-out))
	      (show-all main-window))))))))


(gtk-main)




