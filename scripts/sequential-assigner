; -*-scheme-*-
;
; ------------------------
;
; Sequential assignment strategy based on hncacb, cbcaconh, and noesy
; with scrollable, selectable strip plots.
;
; ------------------------

(use-modules (burrow hacks)
	     (oop goops)
             (gnome gtk)
	     (gnome gobject)
	     (burrow spectrum)
	     (burrow canvas)
	     (burrow assignments)
	     (ice-9 getopt-long)
	     (srfi srfi-1)
	     (srfi srfi-19)
	     (burrow chemical-shift-distributions))

'(define (confess . args) 'ok)
; to debug use this:
(define (confess . args)
   (apply format (cons #t args))
   (newline))
(define (assert condition . args)
  (if condition 'ok (apply error args)))

(burrow-assert-version 1 4)

(sleep-if-requested)
(define-usage
  "Sequential assignment based on 3D spectra")

(define option-spec
  '((assignment-file (single-char #\a) (value #t))))
(define options (getopt-long (command-line) option-spec))
(define assignment-file-name #f)
(define assignments #f)

(let ((names '("assignments.str" "assignments.scm"))
      (requested-assignment-file (option-ref options 'assignment-file #f)))
  (if requested-assignment-file
      (set! names (cons requested-assignment-file names)))
  (let loop ((fnames names))
    (if (null? fnames)
	(error "Could not read any of these assignment files: " names))
    (if (false-if-exception
	 (set! assignments (assignments-from-file (car fnames))))
	(set! assignment-file-name (car fnames))
	(loop (cdr fnames)))))

;; determine the protein sequence, from the assignments
;; FIXME could also do this from a PDB file, a one-code sequence, etc.
(define sequence
  (let ((result (list)))
    (for-each
     (lambda (asg)
       (if (number? (assignment:residue-name asg))
	   (set! result
		 (assoc-set!
		  result
		  (assignment:residue-name asg)
		  (assignment:residue-type asg)))))
     assignments)
    (sort result (lambda (a b)(< (car a)(car b))))))

; ---------------
; Spectrum utilities
; ---------------
(define (spectrum-zoom spec x y dx dy)
  (spectrum-transpose
   (spectrum-extract-ppm (spectrum-transpose
			  (spectrum-extract-ppm spec
						(- x dx)
						(+ x dx))
			  1)
			 (- y dy)
			 (+ y dy)) 1))

(define (spectrum-sw-ppm spec dim)
  (/ (spectrum-sw spec dim)
     (spectrum-sf spec dim)))

; ---------------
; Design notes
;
; there is a central list of residues; each one has a set of adjustments corresponding
; to atoms and a strip plot in the main window.
;
; ---------------

; ---------------
; Assignments
;
; an assignment table is a collection of gtkadjustments,
; indexed by residue and then by atom type.
;
; ---------------

;; create a default adjustment with appropriate limits for a given atom symbol.
(define default-adjustment
  (let ((table '(((h H HN)         . (4.0    16.0))
		 ((h-aliphatic)    . (-2.0   7.0))
		 ((h-all)          . (-2.0   16.0))
		 ((n N)            . (90.0   150.0))
		 ((c C)            . (120.0  220.0))
		 ((ca Ca CA)       . (40.0   80.0))
		 ((cb Cb CB)       . (0.0    80.0)))))
    (define (search-table table atom)
      (cond ((null? table)
	     '(-1000 1000))
	    ((member atom (caar table))
	     (cdar table))
	    (else (search-table (cdr table) atom))))
    (lambda (atom)
      (let* ((limits (search-table table atom))
	     (min (car limits))
	     (max (cadr limits)))
	(make <gtk-adjustment>
	  #:lower min
	  #:upper max
	  #:value (/ (+ min max) 2)
	  #:step-increment (/ (- max min) 1000))))))

(define (default-adjustment-with-value atom shift)
  (let ((adj (default-adjustment atom)))
    (set-value adj shift)
    adj))

;; here are some sample assignments.
(define assign-table
  (let ((op default-adjustment-with-value))
    `(((H . ,(op 'H 9.79))
       (N . ,(op 'N 124.4))
       (CA . ,(op 'CA 54.7)))
      ((H . ,(op 'H 7.79))
       (N . ,(op 'N 123.1))
       (CA . ,(op 'CA 53.0)))
      ((H . ,(op 'H 8.31))
       (N . ,(op 'N 115.0))
       (CA . ,(op 'CA 66.6)))
      ((H . ,(op 'H 8.27))
       (N . ,(op 'N 121.4))
       (CA . ,(op 'CA 56.4))))))



; ---------------
; Spectra
; ---------------


; --------------
; Convoluted search spectra
; --------------
(define (make-convoluted-4d s)
  (set! s (spectrum-convolute s s)) ;; H C N H' C' N'
  (set! s (spectrum-transpose s 3)) ;; H' H C N C' N'
  (set! s (spectrum-diagonal-project s)) ;; H C N C' N'
  (set! s (spectrum-transpose s 2)) ;; N H C C' N'
  (set! s (spectrum-transpose s 4)) ;; N' N H C C'
  (set! s (spectrum-diagonal-project s)) ;; N H C C'
  (set! s (spectrum-transpose s 1)) ;; H N C C'
  (set! s (spectrum-transpose s 2)) ;; C H N C'
  (set! s (spectrum-transpose s 3)) ;; C' C H N
  s)

(define (make-noesy-convoluted s)
  (set! s (spectrum-convolute s s)) ;; H H1 N H' H1' N'
  (set! s (spectrum-transpose s 4)) ;; H1' H H1 N H' N'
  (set! s (spectrum-diagonal-project s)) ;; H H1 N H' N'
  (set! s (spectrum-transpose s 1)) ;; H1 H N H' N'
  (set! s (spectrum-transpose s 3)) ;; H' H1 H N N'
  (set! s (spectrum-diagonal-project s)) ;; H1 H N N'
  (set! s (spectrum-transpose s 3)) ;; N' H1 H N
  (set! s (spectrum-transpose s 1)) ;; H1 N' H N
  s)


(define-macro (push name proc)
  `(let ((result (false-if-exception ,proc)))
     (if result (set! data (cons (cons (quote ,name) result) data)))))

(define (assoc-ref data name)
  (false-if-exception (cdr (assoc name data))))

(define spectra
  (let ((data (list)))
    (define (grab x)(assoc-ref data x))
    (push cbcaconh (spectrum-normalize-order (spectrum-nih-from-file "cbcaconh.DAT")))
    (push hncacb   (spectrum-normalize-order (spectrum-nih-from-file "hncacb.DAT")))
    (push hnca     (spectrum-normalize-order (spectrum-nih-from-file "hnca.DAT")))
    (push hsqc     (spectrum-nih-from-file "hsqc.DAT"))
    (push noesy    (spectrum-normalize-order (spectrum-nih-from-file "noesy.DAT")))
    (push noesy-diagonal (grab 'noesy))
    (push noesy-convoluted (make-noesy-convoluted (grab 'noesy)))
    (push hncacb-convoluted (make-convoluted-4d (grab 'hncacb)))
    (push cbcaconh-convoluted (make-convoluted-4d (grab 'cbcaconh)))
    data))

(define strip-plot-names
  (filter (lambda(x)(assoc-ref spectra x))
	  '(cbcaconh hncacb hnca noesy)))

;; default width for strips with xdim = H
(define H-width 0.15)

; project a spectrum until it has no more
; than two dimensions.
(define (spectrum->2d spec)
  (let ((n (spectrum-ndim spec)))
    (if (<= n 2)
	spec
	(spectrum->2d (spectrum-project (spectrum-transpose spec (- n 1)) 0)))))

(define (spectrum->approx-noise spec)
  (spectrum-stddev (spectrum->2d spec)))

(define (spectrum->thres spec)
  (let* ((base    (inexact->exact (log10 (spectrum->approx-noise spec))))
	 (floor   (- base 3))
	 (ceiling (+ base 5)))
    (make <gtk-adjustment> #:lower floor #:upper ceiling #:value base #:step-increment 0.1)))

(define (make-default-thres-adjustment)
  (make <gtk-adjustment> #:lower 2 #:upper 20 #:value 5.5 #:step-increment 0.1))

(define *thres-table* (make-hash-table))
(define *thres-table/depr* (list))
(define (get-thres-adjustment name)
  (or (assoc-ref *thres-table/depr* name)
      (let* ((spec (assoc-ref spectra name))
	     (thres (if spec
			(spectrum->thres spec)
			(make-default-thres-adjustment))))
	(set! *thres-table/depr* (cons (cons name thres) *thres-table/depr*))
	thres)))

;; ensure that there is a threshold for all spectra, at start-up.
(for-each get-thres-adjustment (map car spectra))

(define (make-thres-window)
  (let ((vbox (make <gtk-vbox>))
	(window (make <gtk-window> #:title "Thresholds")))
    (define (add-spin-button name)
      (let* ((text (symbol->string name))
	     (thres (get-thres-adjustment name))
	     (sb (make <gtk-spin-button> #:digits 2 #:adjustment thres))
	     (hbox (make <gtk-hbox>)))
	(pack-start hbox sb #f #f 5)
	(pack-start hbox (make <gtk-label> #:label text) #f #f 5)
	(pack-start vbox hbox #f #f 5)))
    (for-each add-spin-button (map car *thres-table/depr*))
    (add window vbox)
    window))

(define (canvas-zoom canv factor)
  (let* ((allocation (gtk-widget-get-allocation canv))
	 (width (vector-ref allocation 2))
	 (height (vector-ref allocation 3)))
    (define (->int x)
      (inexact->exact (round x)))
    (gtk-widget-set-size-request canv (->int (* width factor))(->int (* height factor)))))

;; FIXME need a new 'verified' mechanism??
(define (canvas-add-assignment-labels canv)
  (define (add-label-from-strip strip)
    (let* ((H ((strip 'get-adj) 'H))
	   (N ((strip 'get-adj) 'N)))
      (let* ((label  (strip-name strip))
	     (marker (canvas-add-marker-text canv label)))
	(marker-set-adjustments marker H N)
	(set marker 'sensitive #f))))
  (for-each add-label-from-strip residues))

(define (run-hsqc-pick action)
  (spectrum->amide-window/defaults
   (assoc-ref spectra 'hsqc)
   "hsqc picker"
   'hsqc))

(define (contour-plot-calibrate-threshold contour-plot)
  (let ((contour (get contour-plot 'contour))
	(spec (spectrum-cap-ndim (get contour-plot 'spectrum) 2)))
    (set contour
	 'threshold
	 (log10 (spectrum-get-percentile spec 0.95)))))

;;
;; Create a canvas with scroll bars containing a contour plot and a marker.
;; @spec: <hos-spectrum> to draw
;; @title: string; label to put on the plot
;; @name:  name corresponding to H-adj, N-adj
;; @H-adj, @N-adj: GtkAdjustments tied to the position of the marker
;; @thres-table, @thres-key: hash-table and key.  If set, use as the
;;         adjustment tied to the contour plot.  Otherwise, set to the
;;         default contour level adjustment of the contour plot.
;;
(define (spectrum->amide-window spec title name H-adj N-adj thres-table thres-key)
  (let* ((window (make <gtk-window>
		   #:title (string-append title (format #f " -- residue ~a" name))
		   #:default-width 500
		   #:default-height 500))
	 (sw (make <gtk-scrolled-window>
	       #:hscrollbar-policy 'automatic
	       #:vscrollbar-policy 'automatic))
	 (canvas (make <hos-canvas> #:draggable #t))
	 (contour-plot (canvas-set-spectrum canvas spec))
	 (zoom-in-button (make <gtk-button> #:label "ZOOM IN"))
	 (zoom-out-button (make <gtk-button> #:label "ZOOM OUT"))
	 (zoom-scale
	  (make <gtk-hscale>
	    #:tooltip-text "zoom factor"
	    #:adjustment (get canvas 'zoom-adjustment)))
	 (grid (canvas-add-item canvas (make <hos-grid>)))
	 (shift-label (make <gtk-label>))
	 (marker (canvas-add-marker canvas))

	 (close-button (make <gtk-button> #:label "close"))
	 (nametag (make <gtk-label> #:label (format #f "~a" name)))
	 (thres-spin (make <gtk-spin-button>
		       #:digits 2
		       #:tooltip-text "contour threshold level")))
    (define (sync-label! . args)
      (set shift-label 'label (format #f
				      "~$, ~$"
				      (get H-adj 'value)
				      (get N-adj 'value))))
    (define (zoom-by factor)
      (lambda args (set canvas 'zoom (* factor (get canvas 'zoom)))))
    (sync-label!)
    (contour-plot-calibrate-threshold contour-plot)
    (if (not (hash-ref thres-table thres-key))
	(hash-set! thres-table
		   thres-key
		   (contour-plot->thres-adjustment contour-plot)))
    (set thres-spin 'adjustment (hash-ref thres-table thres-key))
    (contour-set-thres-adjustment (get contour-plot 'contour)
				  (hash-ref thres-table thres-key))
    (marker-set-adjustments marker H-adj N-adj)
    (connect marker 'dropped sync-label!)
    (canvas-tie-focus-to-marker canvas marker)
    (connect zoom-in-button 'clicked (zoom-by 1.5))
    (connect zoom-out-button 'clicked (zoom-by 0.5))
    (add sw canvas)
    (let ((vbox (make <gtk-vbox>))
	  (top-hbox (make <gtk-hbox>)))
      (add window vbox)
      (pack-start vbox top-hbox #f #f 5)
      (pack-start top-hbox nametag #f #f 5)
      (pack-start top-hbox zoom-in-button #f #f 5)
      (pack-start top-hbox zoom-out-button #f #f 5)
      (pack-start top-hbox thres-spin #f #f 5)
      (pack-start top-hbox shift-label)
      (pack-start vbox zoom-scale #f #f 5)
      (pack-start vbox sw #t #t 0)
      (pack-start vbox close-button #f #f 5)
      (connect close-button
	       'clicked
	       (lambda args (gtk-widget-destroy window) #f))
      (show-all window)
      (lambda (req)
	(case req
	  ((canv) canvas)
	  ((window) window)
	  (else (error "amide window: unknown request " req)))))))

;;
;; Create a window with a contour plot of @spec,
;; using chemical shift information from global "strip-selection".
;; Add default chemical shift assignments to the canvas.
;;
(define (spectrum->amide-window/defaults spec title key)
  (let ((result (spectrum->amide-window
		 spec
		 title
		 (strip-selection 'name)
		 ((strip-selection 'get-adj) 'H)
		 ((strip-selection 'get-adj) 'N)
		 *thres-table*
		 key)))
    (canvas-add-assignment-labels (result 'canv))
    result))

(define (make-amide-window title spec thres)
  (if strip-selection
      (let* ((sw (make <gtk-scrolled-window>))
	     (H-adj ((strip-selection 'get-adj) 'H))
	     (N-adj ((strip-selection 'get-adj) 'N))
	     (H-spin (make <gtk-spin-button> #:digits 2))
	     (N-spin (make <gtk-spin-button> #:digits 2))
	     (thres-spin (make <gtk-spin-button> #:digits 2 #:adjustment thres))
	     (zoom-in-button (make <gtk-button> #:label "ZOOM IN"))
	     (zoom-out-button (make <gtk-button> #:label "ZOOM OUT"))
	     (name (strip-selection 'name))
	     (window (make <gtk-window>
		       #:title (string-append title (format #f " -- residue ~a" name))
		       #:default-width 500
		       #:default-height 500))
	     (canv (make <hos-canvas>))
	     (contour-plot (canvas-add-item canv (make <hos-contour-plot> #:spectrum spec)))
	     (vbox (make <gtk-vbox>)))
	(define sync-window!
	  (let ((sw-hadj (gtk-scrolled-window-get-hadjustment sw))
		(sw-vadj (gtk-scrolled-window-get-vadjustment sw)))
	    (lambda ()
	      (let* ((canv-allocation (gtk-widget-get-allocation canv))
		     (canv-width (vector-ref canv-allocation 2))
		     (canv-height (vector-ref canv-allocation 3))
		     (sw-allocation (gtk-widget-get-allocation sw))
		     (sw-width (vector-ref sw-allocation 2))
		     (sw-height (vector-ref sw-allocation 3))
		     (H (get H-adj 'value))
		     (H-fraction (/ (- (spectrum-orig-ppm spec 0) H)
				    (spectrum-sw-ppm spec 0)))
		     (N (get N-adj 'value))
		     (N-fraction (/ (- N (spectrum-giro-ppm spec 1))
				    (spectrum-sw-ppm spec 1))))
		(set sw-hadj 'value (* H-fraction canv-width))
		(set sw-vadj 'value (* N-fraction canv-height))))))
	(assert spec "make-amide-window: no spectrum" title)
	(canvas-sync-world canv spec)
	(contour-set-thres-adjustment (get contour-plot 'contour) thres)
	(canvas-add-assignment-labels canv)
	(set H-spin 'adjustment H-adj)
	(set N-spin 'adjustment N-adj)
	(add window vbox)
	(let ((button (make <gtk-button> #:label "close"))
	      (top-hbox (make <gtk-hbox>))
	      (nametag (make <gtk-label> #:label (format #f "~a" name))))
	  (define (zoomer factor)
	    (lambda(b)
	      (canvas-zoom canv factor)
	      (sync-window!)
	      #f))
	  (pack-start vbox top-hbox #f #f 5)
	  (pack-start top-hbox nametag #f #f 5)
	  (pack-start top-hbox zoom-in-button #f #f 5)
	  (pack-start top-hbox zoom-out-button #f #f 5)
	  (pack-start top-hbox thres-spin #f #f 5)
	  (pack-start top-hbox H-spin #f #f 5)
	  (pack-start top-hbox N-spin #f #f 5)
	  (gtk-scrolled-window-add-with-viewport sw canv)
	  (pack-start vbox sw #t #t 0)
	  (pack-start vbox button #f #f 5)
	  (connect zoom-in-button 'clicked (zoomer 1.2))
	  (connect zoom-out-button 'clicked (zoomer (/ 1.0 1.2)))
	  (connect button 'clicked (lambda args (gtk-widget-destroy window) #f)))
	(let ((marker (canvas-add-marker canv)))
	  (marker-set-adjustments marker H-adj N-adj))
	(show-all window)
	(lambda (req)
	  (case req
	    ((canv) canv)
	    ((window) window)
	    (else (error "amide window: unknown request " req)))))))

(define (run-noesy-search action)
  (let* ((H (get-value ((strip-selection 'get-adj) 'H)))
	 (N (get-value ((strip-selection 'get-adj) 'N)))
	 (spec (spectrum-project-ppm
		(spectrum-project-ppm (assoc-ref spectra 'noesy-convoluted) H) N))
	 (amide-window
	  (spectrum->amide-window/defaults spec
					   "noesy search"
					   'noesy-convoluted)))
    (show-all (amide-window 'window))))

(define (run-noesy-search-prev action)
  (let* ((H (get-value (((strip-selection 'prev) 'get-adj) 'H)))
	 (N (get-value (((strip-selection 'prev) 'get-adj) 'N)))
	 (spec (spectrum-project-ppm
		(spectrum-project-ppm
		 (assoc-ref spectra 'noesy-convoluted) H) N))
	 (amide-window
	  (spectrum->amide-window/defaults spec
					   "noesy search (i-1)"
					   'noesy-convoluted)))
    (show-all (amide-window 'window))))

(define (run-convoluted-search title strip spec-name)
  (if strip
      (let ((CA-adj ((strip 'get-adj) 'CA))
	    (CB-adj ((strip 'get-adj) 'CB))
	    (spec-conv (assoc-ref spectra spec-name)))
	(define (grab-spec!)
	  (let ((ca (get-value CA-adj))
		(cb (get-value CB-adj)))
	    (spectrum-project-ppm
	     (spectrum-project-ppm spec-conv cb) ca)))
	(let* ((amide-window
		(spectrum->amide-window/defaults (grab-spec!) title spec-name))
	       (refresh-signal (connect CA-adj 'value-changed (lambda args (canvas-set-spectrum (amide-window 'canv) (grab-spec!)) #f)))
	       (refresh-signal-cb (connect CB-adj 'value-changed (lambda args (canvas-set-spectrum (amide-window 'canv) (grab-spec!)) #f))))
	  (connect (amide-window 'window)
		   'destroy (lambda args
			      (gsignal-handler-disconnect CA-adj refresh-signal)
			      (gsignal-handler-disconnect CB-adj refresh-signal-cb)
			      #f))
	  amide-window))))

(define run-hnca-search-inner
  (let ((spec-hnca (assoc-ref spectra 'hnca)))
    (if spec-hnca
	(let ((hnca-chn (spectrum-transpose (assoc-ref spectra 'hnca) 1)))
	  (lambda (strip . prev?)
	    (confess "run-hnca-search-inner: enter")
	    (if strip
		(let ((CA-adj ((if (null? prev?)
				   (strip 'get-adj)
				   ((strip 'prev) 'get-adj)) 'CA))
		      (thres (get-thres-adjustment 'hnca-search)))
		  (define (grab-spec!)
		    (spectrum-project-ppm hnca-chn (get-value CA-adj)))
		  (confess "run-hnca-search-inner check 1")
		  (let* ((amide-window (make-amide-window
					(if (null? prev?) "HNCA search" "HNCA(i-1) search")
					(grab-spec!) thres))
			 (refresh-signal
			  (connect CA-adj 'value-changed
				   (lambda args (canvas-set-spectrum (amide-window 'canv) (grab-spec!)) #f))))
		    (connect (amide-window 'window)
			     'destroy (lambda args
					(gsignal-handler-disconnect CA-adj refresh-signal)
					#f))
		    amide-window)))))
	(lambda args #f))))

(define (run-hnca-search action)
  (run-hnca-search-inner strip-selection))

(define (run-hnca-prev-search action)
  (run-hnca-search-inner strip-selection 'prev))

(define (run-hncacb-search action)
  (let ((win (run-convoluted-search "hncacb search" strip-selection 'hncacb-convoluted)))
    (canvas-set-draw-negative (win 'canv) #t)))

(define (run-cbcaconh-search action)
  (run-convoluted-search "cbcaconh search" (strip-selection 'prev) 'cbcaconh-convoluted))

; ----------------------------------
; GUI layout
; ----------------------------------

;; Strips will be held in this horizontal box.
(define strip-sw (make <gtk-scrolled-window>))
(define strip-hbox (make <gtk-hbox>))
(gtk-scrolled-window-add-with-viewport strip-sw strip-hbox)

(define (strip-jump-to-nth nth)
  (let* ((allocation (gtk-widget-get-allocation strip-hbox))
	 (width (vector-ref allocation 2))
	 (frac (/ (* 1.0 nth)(length residues)))
	 (pos (* frac width))
	 (adj (gtk-scrolled-window-get-hadjustment strip-sw)))
    (set adj 'value pos)))

(define (equal-stringwise? a b)
  (equal? (format #f "~a" a)
	  (format #f "~a" b)))

(define (strip:name->index name)
  (define (iter n remaining)
    (cond ((null? remaining) #f)
	  ((equal-stringwise? (strip-name (car remaining)) name) n)
	  (else (iter (+ n 1)(cdr remaining)))))
  (iter 0 residues))

(define (strip-jump-to-name name)
  (let ((idx (strip:name->index name)))
    (and idx (strip-jump-to-nth idx))))
    
(define (make-strip spec H N)
  (let* ((s1 (spectrum-project-ppm
	      (spectrum-transpose spec 2) N))
	 (s2 (spectrum-extract-ppm
	      s1
	      (- H H-width)
	      (+ H H-width))))
    s2))

(define (make-strip-frame name H-adj N-adj)
  (let* ((frame (make <gtk-frame> #:label (symbol->string name)))
		(spec (assoc-ref spectra name))
		(thres-adj (get-thres-adjustment name))
		(canv (make <hos-canvas> #:width-request 75 #:height-request 400))
		(contour-plot (canvas-add-item canv (make <hos-contour-plot>)))
		(cross-canvas (make <hos-canvas> #:width-request 75 #:height-request 75))
		(v-cursor (canvas-add-cursor-vertical canv))
		(vbox (make <gtk-vbox>))
		(cross-spectrum #f)
		(cross-marker (canvas-add-marker cross-canvas)))
    (define (cross-set-spectrum cross-spec)
      (set! cross-spectrum cross-spec))
    (define (update-spec! . args)
      (let ((x (get-value H-adj))
	    (y (get-value N-adj)))
	(set contour-plot 'spectrum (make-strip spec x y))
	(canvas-sync-world canv (get contour-plot 'spectrum))
	(if cross-spectrum
	    (let ((snippet (spectrum-zoom cross-spectrum x y 0.15 1.5)))
	      (canvas-set-spectrum cross-canvas snippet)))))
    (assert spec "make-strip-frame: no spectrum" name)
    (marker-set-adjustments cross-marker H-adj N-adj)
    (cursor-set-adjustment v-cursor H-adj)
    (set v-cursor 'sensitive #f)
    (update-spec!)
    (connect H-adj 'value-changed update-spec!)
    (connect N-adj 'value-changed update-spec!)
    (add frame vbox)
    (pack-start vbox canv #t #t 0)
    (pack-start vbox cross-canvas #f #f 5)
    (contour-set-thres-adjustment (get contour-plot 'contour) thres-adj)
    (lambda (req)
      (cond ((eq? req 'outer) frame)
	    ((eq? req 'canvas) canv)
	    ((eq? req 'contour-plot) contour-plot)
	    ((eq? req 'cross-canvas) cross-canvas)
	    ((eq? req 'cross-set-spectrum) cross-set-spectrum)
	    ((eq? req 'show-cross)(show-all cross-canvas))
	    ((eq? req 'hide-cross)(hide cross-canvas))
	    (else (error "strip frame: unknown request:" req))))))

;; there is one global H cursor that will be present in all noesy strips.
(define global-noesy-H-adjustment (default-adjustment 'h-all))

;; An amino acid type predictor window, based on CA and CB shifts.
(define (aa-predictor CA-adj CB-adj)
  (let ((frame (make <gtk-frame> #:label "aa predictor"))
	(view (make <gtk-tree-view>))
	(sw (make <gtk-scrolled-window> #:vscrollbar-policy 'always)))
    (define (add-column! title num)
      (let ((renderer (make <gtk-cell-renderer-text>))
	    (column (make <gtk-tree-view-column> #:title title)))
	(pack-start column renderer #f)
	(add-attribute column renderer "text" num)
	(append-column view column)))
    (define (update-list . args)
      (let ((ca (get CA-adj 'value))
	    (cb (get CB-adj 'value)))
	(and ca cb
	     (let ((candidates (shift-top-probabilities 'CA ca 'CB cb)))
	       (confess "update in progress!!")
	       (confess "probably: ~a~%" (car candidates))
	       (let ((store (gtk-list-store-new (list <gchararray> <gdouble>))))
		 (for-each (lambda (candidate)
			     (let ((iter (gtk-list-store-append store)))
			       (set-value store iter 0 (symbol->string (car candidate)))
			       (set-value store iter 1 (cdr candidate))))
			   candidates)
		 (set view 'model store))
	       #f))))
    (add sw view)
    (add frame sw)
    (add-column! "residue" 0)
    (add-column! "prob." 1)
    (lambda (req)
      (cond ((eq? req 'widget) frame)
	    ((eq? req 'update) update-list)
	    (else (error "aa-predictor: unknown request " req))))))

; ------ proton cursor position window -----
(define proton-window
  (let ((window (make <gtk-window> #:title "Hall's Window"))
	(vbox (make <gtk-vbox>))
	(label (make <gtk-label>))
	(spin (make <gtk-spin-button> #:digits 2)))
    (set spin 'adjustment global-noesy-H-adjustment)
    (let ((signal (connect global-noesy-H-adjustment 'value-changed (lambda args (show-all window) #f))))
      (connect window 'destroy (lambda args (gsignal-handler-disconnect global-noesy-H-adjustment signal) #f)))
    (pack-start vbox label)
    (gtk-label-set-markup label "<span foreground='red' size='x-large'>The proton cursor is at:</span>")
    (pack-start vbox spin #f #f 5)
    (add window vbox)))

; ------------------------------------------

;; The strip selection--
;; there is a global selection which dictates which strip will be used
;; for convoluted searches, etc.
(define strip-selection #f)

(define (strip-name strip)
  (format #f "~a"(strip 'residue-id)))

(define (residue-set-assignment residue atom assignment)
  (let ((adj ((residue 'get-adj) atom)))
    (set-value adj assignment)))

; 'residue' abstraction--
; includes a set of resonance adjustments and a window with strip plots.
(define (make-residue residue-id residue-type)
  (let ((adjustments (list))
	(name (format #f "~a (~a)" residue-id residue-type))
	(preceding #f)
	(verified  #f))
    (define (get-adj atom)
      (cond ((assoc atom adjustments) => cdr)
	    (else (let ((new-adjustment (default-adjustment atom)))
		    (set! adjustments (cons (cons atom new-adjustment) adjustments))
		    new-adjustment))))
    (define (make-strip-entry-for name)
      (cons name (make-strip-frame name (get-adj 'H)(get-adj 'N))))
    (let ((frames (map make-strip-entry-for strip-plot-names))
	  (hbox (make <gtk-hbox>))
	  (vbox (make <gtk-vbox>))
	  (name-label (make <gtk-label> #:label name))
	  (verify-button (gtk-check-button-new-with-label "verified"))
	  (aa-predictor (aa-predictor (get-adj 'CA)
				      (get-adj 'CB)))
	  (H-spin (make <gtk-spin-button> #:digits 2))
	  (N-spin (make <gtk-spin-button> #:digits 2)))
      (define (get-frame name)
	(assoc-ref frames name))
      (define (add-cursor residue spec-name atom)
	(let ((frame (get-frame spec-name))
	      (adj ((if residue
			(residue 'get-adj)
			get-adj)
		    atom)))
	  (and frame adj
	       (let* ((canvas (frame 'canvas))
		      (cursor (canvas-add-cursor-horizontal canvas)))
		 (cursor-set-adjustment cursor adj)
		 cursor))))
      (define (link-preceding-residue preceding-residue)
	(set! preceding preceding-residue)
	(let ((c (add-cursor preceding-residue 'cbcaconh 'CA)))
	  (if c (connect c 'dropped ((preceding-residue 'aa-predictor) 'update))))
	(let ((c (add-cursor preceding-residue 'cbcaconh 'CB)))
	  (if c (connect c 'dropped ((preceding-residue 'aa-predictor) 'update))))
	(add-cursor preceding-residue 'hnca 'CA))
      (and (get-frame 'hncacb)
	   (contour-plot-set-draw-negative ((get-frame 'hncacb) 'contour-plot) #t))
      (let ((c (add-cursor #f 'hncacb 'CA)))
	(if c (connect c 'dropped (aa-predictor 'update))))
      (let ((c (add-cursor #f 'hncacb 'CB)))
	(if c (connect c 'dropped (aa-predictor 'update))))
      (add-cursor #f 'hnca 'CA)
      (for-each (lambda (entry)
		  (let ((strip-frame ((cdr entry) 'outer)))
		    (pack-start hbox strip-frame #f #f 0)))
		frames)
      (set H-spin 'adjustment (get-adj 'H))
      (set N-spin 'adjustment (get-adj 'N))
      (pack-start vbox name-label #f #f 5)
      (pack-start vbox hbox #t #t 0)
      (let ((spin-hbox (make <gtk-hbox>)))
	(pack-start spin-hbox H-spin #f #f 5)
	(pack-start spin-hbox N-spin #f #f 5)
	(pack-start vbox spin-hbox #f #f 0))
      (pack-start vbox verify-button #f #f 5)
      (set verify-button 'active verified)
      (connect verify-button 'toggled
	       (lambda args
		 (set! verified (get verify-button 'active))
		 #f))
      (pack-start vbox (aa-predictor 'widget) #t #t 5)
      ;; add some decorations to the noesy spec
      (and (get-frame 'noesy)
	   (let* ((frame (get-frame 'noesy))
		  (noesy-canv (frame 'canvas))
		  (noesy-H-cursor (canvas-add-cursor-horizontal noesy-canv))
		  (diagonal-cursor (canvas-add-cursor-horizontal noesy-canv)))
	     ((frame 'cross-set-spectrum) (assoc-ref spectra 'noesy-diagonal))
	     (cursor-set-adjustment noesy-H-cursor global-noesy-H-adjustment)
	     (cursor-set-adjustment diagonal-cursor (get-adj 'H))
	     (set diagonal-cursor 'sensitive #f)))
      (show-all vbox)
      (lambda(req)
	(cond ((eq? req 'widget)       vbox)
	      ((eq? req 'name)         name)
	      ((eq? req 'residue-id)   residue-id)
	      ((eq? req 'residue-type) residue-type)
	      ((eq? req 'get-adj)      get-adj)
	      ((eq? req 'frames)       frames)
	      ((eq? req 'prev)         preceding)
	      ((eq? req 'link-preceding-residue) link-preceding-residue)
	      ((member req '(hide-cross show-cross))
	       (for-each (lambda (entry)
			   ((cdr entry) req)) frames))
	      ((eq? req 'show-aa)(show (aa-predictor 'widget)))
	      ((eq? req 'hide-aa)(hide (aa-predictor 'widget)))
	      ((eq? req 'aa-predictor) aa-predictor)
	      (else (error "residue: unknown request " req)))))))

;; create 'residues'
(define residues
  (map make-residue
       (map car sequence)
       (map cdr sequence)))

;; revert an assignment to what it was upon bootup
(define revert-assignment
  (let ((table (assignments->residue-table assignments)))
    (lambda (strip)
      (define (copy-assignment assignment)
	(residue-set-assignment
	 strip 
	 (assignment:atom-name assignment)
	 (assignment:shift     assignment)))
      (for-each copy-assignment (hash-ref table (strip 'residue-id))))))

(for-each revert-assignment residues)

;; establish i --> i-1 links
(let loop ((residues residues))
  (if (>= (length residues) 2)
      (begin
	(((cadr residues) 'link-preceding-residue)
	 (car residues))
	(loop (cdr residues)))))

;; pack in the widgets
(for-each
 (lambda (residue)
   (let ((widget  (residue 'widget)))
     (pack-start strip-hbox widget #f #f 10)
    (connect widget 'button-press-event
	     (lambda args
	       ;; de-highlight currently selected strip
	       (if strip-selection
		   (gtk-widget-set-state (strip-selection 'widget) 'normal))
	       (gtk-widget-set-state widget 'selected)
	       (set! strip-selection residue)
	       #f))))
 residues)

;
; write assignments to the same file they were read in from.
; note: only writes backbone assignments; clobbers existing assignment
; file!
;
(define (write-assignments . args)
  (define (residue->assignments residue)
    (define (get-atom name)
      (let ((assignment (make-assignment))
	    (value (get ((residue 'get-adj) name) 'value)))
	(assignment-set! assignment 'residue-name (residue 'residue-id))
	(assignment-set! assignment 'atom-name    name)
	(assignment-set! assignment 'shift        value)
	(assignment-set! assignment 'residue-type (residue 'residue-type))
	assignment))
    (map get-atom (list 'H 'N 'CA 'CB)))
  (let ((assignments (apply append (map residue->assignments residues))))
    (catch 'file-exists
	   (lambda () (assignments-to-file assignments assignment-file-name))
	   (lambda args
	     (let ((dialog (make <gtk-message-dialog>
			     #:title "Warning"
			     #:text (format #f "File ~a exists: overwrite?" assignment-file-name)
			     #:buttons 'ok)))
	       (if (eq? 'ok
			(genum->symbol (make <gtk-response-type> #:value (run dialog))))
		   (assignments-to-file assignments assignment-file-name #t))
	       (destroy dialog))))))
			      
;; How to make a widget look 'selected'
;; (gtk-widget-set-state hbox 'selected)

;; A gtk-action callback that shows or hides a class of strip plots.
(define (strip-toggler type)
  (define (toggle-strip op)
    (lambda (strip)
      (cond ((assoc type (strip 'frames)) => (lambda(s)(op ((cdr s) 'outer)))))))
  (lambda (action)
    (let ((op (if (get-active action) show hide)))
      (for-each (toggle-strip op) residues))))

(define (cross-section-toggle action)
  (for-each
   (lambda(strip)
     (strip (if (get-active action) 'show-cross 'hide-cross)))
   residues))

(define (aa-toggle action)
  (for-each
   (lambda (strip)
     (strip (if (get-active action) 'show-aa 'hide-aa)))
   residues))


(define (revert-current-assignment . args)(revert-assignment strip-selection))

;; Set up a UI manager that contains a menu which can select which strip plots
;; are displayed.
(define ui-manager
  (let ((ui (make <gtk-ui-manager>))
	(actions (make <gtk-action-group> #:name "Actions"))
	(toggle-entries
	 `(("cross-section" #f "cross-section" #f "cross-section" ,cross-section-toggle #t)
	   ("aa-predictor" #f "aa-predictor" #f "aa-predictor" ,aa-toggle #t)))
	(action-entries
	 `(("JumpMenu" #f "_Jump to strip")
	   ("hncacb-search" #f "hncacb search" #f "hncacb search" ,run-hncacb-search)
	   ("cbcaconh-search" #f "cbcaconh search" #f "cbcaconh search" ,run-cbcaconh-search)
	   ("hnca-search" #f "hnca search" #f "hnca search" ,run-hnca-search)
	   ("hnca-prev-search" #f "hnca(i-1) search" #f "hnca(i-1) search" ,run-hnca-prev-search)
	   ("conv-noesy" #f "noesy search" #f "noesy search" ,run-noesy-search)
	   ("conv-noesy-prev" #f "noesy search (<-)" #f "noesy search (<-)" ,run-noesy-search-prev)
	   ("hsqc-pick" #f "hsqc-pick" #f "hsqc-pick" ,run-hsqc-pick)
	   ("thres" #f "Thresholds..." #f "Thresholds" ,(lambda (action)(show-all (make-thres-window))))
	   ("revert-assignment" #f "revert assignments" #f "revert assignments" ,revert-current-assignment)
	   ("write-assignments" #f "write-assignments" #f "write-assignments" ,write-assignments)))
	(ui-info "
<ui>
  <menubar name='MenuBar'>
    <menu name='ShowMenu' action='Show'>
      <separator/>
      <menuitem action='thres'/>
      <separator/>
      <menuitem action='cross-section'/>
      <menuitem action='aa-predictor'/>
    </menu>
    <menu action='Actions'>
      <menu action='JumpMenu'/>
      <separator/>
      <menuitem action='hncacb-search'/>
      <menuitem action='cbcaconh-search'/>
      <menuitem action='hnca-search'/>
      <menuitem action='hnca-prev-search'/>
      <menuitem action='conv-noesy'/>
      <menuitem action='conv-noesy-prev'/>
      <menuitem action='hsqc-pick'/>
      <separator/>
      <menuitem action='revert-assignment'/>
      <menuitem action='write-assignments'/>
    </menu>
  </menubar>
</ui>"))
    ;; add some spectrum actions to the toggle entries:
    (confess "strip-plot-names: ~a" strip-plot-names)
    (for-each
     (lambda (name)
       (confess "adding toggle for ~a" name)
       (let ((toggle-action (make <gtk-toggle-action>
			      #:name (symbol->string name)
			      #:label (symbol->string name)))
	     (toggle-op (strip-toggler name)))
	 (connect toggle-action 'toggled toggle-op)
	 (set toggle-action 'active #t)
	 (add-action actions toggle-action)))
     strip-plot-names)
    (add-actions actions '(("Show" #f "Show")))
    (add-actions actions '(("Actions" #f "Actions")))
    (add-toggle-actions actions toggle-entries)
    (add-actions actions action-entries)
    (insert-action-group ui actions 0)
    (gtk-ui-manager-set-add-tearoffs ui #t)
    (gtk-ui-manager-add-ui-from-string ui ui-info)
    (let ((add-spec-toggler
	   (lambda (name)
	     (gtk-ui-manager-add-ui ui (gtk-ui-manager-new-merge-id ui) "ui/MenuBar/ShowMenu"
				    (symbol->string name)
				    (symbol->string name)
				    '(auto) #f))))
      (for-each add-spec-toggler strip-plot-names))
    (let ((strip-names (map strip-name residues)))
      (define (name->action name)
	(list name #f name #f name (lambda args (strip-jump-to-name name))))
      (define (add-strip-selector name)
	(gtk-ui-manager-add-ui ui (gtk-ui-manager-new-merge-id ui) "ui/MenuBar/Actions/JumpMenu"
			       name name '(auto) #f))
      (add-actions actions (map name->action strip-names))
      (for-each add-strip-selector (reverse strip-names)))
    ui))

; -----------------
; main loop
; -----------------

(define (end-application . args)
  (gtk-main-quit))

(define main-window
  (let ((main-window (make <gtk-window> #:default-width 600 #:default-height 700 #:title "sequential assigner"))
	(main-vbox (make <gtk-vbox>)))
    (pack-start main-vbox (gtk-ui-manager-get-widget ui-manager "ui/MenuBar") #f #f 0)
    (pack-start main-vbox strip-sw #t #t 5)
    (add main-window main-vbox)
    main-window))


(show-all main-window)
(connect main-window 'destroy end-application)
(strip-jump-to-name 45)

(gtk-main)



