; -*-scheme-*-
;
; side-by-side views of multiple spectra
; with synchronized cursors

(use-modules (ice-9 format)
             (oop goops)
	     (gnome gtk)
	     (spectrum)
	     (spec-extra)
	     (burrow assignments))

(define-usage
  "Side-by-side comparison of 2D spectra"
  '(<spec-1>)
  '(<spec-2>)
  '(...))

; ---- parameters ----

;; size of integration box
(define x-delta 0.04)
(define y-delta 0.4)

(define assignments (false-if-exception (file->list "assignments.scm")))

(sleep-if-requested)

(define (fname->panel fname)
  (let* ((spec (spectrum-nih-2d-from-file fname))
	 (thres (make <gtk-adjustment> #:lower 2 #:upper 7 #:value 5.5 #:step-increment 0.1))
	 (thres-spin (make <gtk-spin-button> #:digits 2 #:adjustment thres))
	 (integration-label (make <gtk-label> #:label "integral"))
	 (canv (make <hos-canvas>
		 #:width-request 300	
		 #:height-request 300)))
    (define (get-assign-with-default asg name default)
      (or (false-if-exception
	   (cdr (assoc name (cdr (assoc 'assignments (cdr asg))))))
	  default))
    (canvas-set-thres canv thres)
    (canvas-set-draw-negative canv #t)
    (canvas-set-spectrum canv spec)
    (if assignments
	(for-each (lambda (asg)
		    (let* ((H (get-assign-with-default asg 'H 11.0))
			   (N (get-assign-with-default asg 'N 130.0))
			   (label (format #f "~a" (car asg)))
			   (marker (canvas-add-marker-text canv label)))
		      (marker-set-pos marker H N)
		      (marker-set-movable marker #f)
		      'ok))
		  assignments))
    (let ((cursor-horiz (canvas-add-cursor-horizontal canv))
	  (cursor-vert (canvas-add-cursor-vertical canv))
	  (frame (make <gtk-frame> #:label fname))
	  (vbox (make <gtk-vbox>)))
      (define (get-mean)
	(let* ((x (cursor-get-position cursor-vert))
	       (y (cursor-get-position cursor-horiz)))
	  (spectrum-mean (spectrum-extract-2d-ppm spec
						  (- x x-delta)
						  (- y y-delta)
						  (+ x x-delta)
						  (+ y y-delta)))))
      (define (update-integration-label scale)
	(let ((mean (get-mean)))
	  (set integration-label 'label (format #f "intensity: ~$ relative: ~$" mean (/ mean scale)))))
      (let ((hbox (make <gtk-hbox>)))
	(pack-start hbox thres-spin #f #f 5)
	(pack-start hbox integration-label #f #f 5)
	(pack-start vbox hbox #f #f 10))
      (pack-start vbox canv #t #t 0)
      (add frame vbox)
      (show-all frame)
      (ornaments-allow-simultaneous-grab cursor-horiz cursor-vert)
      (list (cons 'name fname)
	    (cons 'spec spec)
	    (cons 'canv canv)
	    (cons 'frame frame)
	    (cons 'update-integration-label update-integration-label)
	    (cons 'get-mean get-mean)
	    (cons 'cursor-horiz cursor-horiz)
	    (cons 'cursor-vert cursor-vert)))))

(define (panels-sync-cursors src dest)
  (cursor-set-adjustment
   (assoc-ref dest 'cursor-horiz)
   (cursor-get-adjustment
    (assoc-ref src 'cursor-horiz)))
  (cursor-set-adjustment
   (assoc-ref dest 'cursor-vert)
   (cursor-get-adjustment
    (assoc-ref src 'cursor-vert))))

(define (main)
  (let ((main-window (make <gtk-window> #:title "Compare NMR spectra"))
	(panels (map fname->panel (cdr (command-line))))
	(vbox (make <gtk-vbox>))
	(shift-label (make <gtk-label>))
	(spec-hbox (make <gtk-hbox>)))
    (let ((first-panel
	   (catch 'wrong-type-arg (lambda()(car panels))(lambda args (throw 'usage)))))
      (confess "window made")
      (for-each (lambda (panel)
		  (pack-start spec-hbox (assoc-ref panel 'frame) panels)
		  (panels-sync-cursors first-panel panel))
		panels)
      (let ((x-adj (cursor-get-adjustment (assoc-ref first-panel 'cursor-horiz)))
	    (y-adj (cursor-get-adjustment (assoc-ref first-panel 'cursor-vert))))
	(define (refresh-label . args)
	  (let ((x (gtk-adjustment-get-value x-adj))
		(y (gtk-adjustment-get-value y-adj)))
	    (set shift-label 'label (format #f "~a, ~a~%" x y)))
	  #f)
	(define refresh-intensities
	  (let ((get-scale (assoc-ref first-panel 'get-mean)))
	    (lambda args
	      (let ((scale (get-scale)))
		(for-each (lambda (panel)
			    ((assoc-ref panel 'update-integration-label) scale)) panels)))))
	(connect x-adj 'value-changed refresh-label)
	(connect y-adj 'value-changed refresh-label)
	(connect x-adj 'value-changed refresh-intensities)
	(connect y-adj 'value-changed refresh-intensities))
      (pack-start vbox shift-label #f #f 10)
      (pack-start vbox spec-hbox #t #t 0)
      (add main-window vbox)
      (show-all main-window)
      (connect main-window 'destroy (lambda args (gtk-main-quit)))
      (gtk-main))))

(catch 'usage main usage-message)
